image: docker:latest

services:
  - docker:dind

stages:
  - test
  - build
  - package
  - deploy
  - certificates

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: openplatform/api


###########################/
# Tests
###########################/
unit-tests:
  stage: test
  image: openjdk:8-jdk
  variables:
    POSTGRES_HOST: "postgres"
    POSTGRES_DB: "open-api"
    POSTGRES_USER: "open-api"
    POSTGRES_PASSWORD: "open-api"
    GOOGLE_CLIENT_ID: $GOOGLE_CLIENT_ID_DEV
    GOOGLE_CLIENT_SECRET: $GOOGLE_CLIENT_SECRET_DEV
    NETWORK_URL: $NETWORK_URL_DEV
    ETHEREUM_PRIVATE_KEY: $ETHEREUM_PRIVATE_KEY_DEV
    OPEN_TOKEN_ADDRESS: $OPEN_TOKEN_ADDRESS_DEV
    EVENT_SUBSCRIPTION: "false"
    OPEN_API_URL: "open-api-url"
    STATE_API_URL: "state-api-url"
  services:
    - name: postgres
      alias: $POSTGRES_HOST
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - apt update && apt install make gcc g++ -y
  script:
    - ./gradlew check
  after_script:
    - cat build/reports/jacoco/test/html/index.html
  coverage: '/Total.*?([0-9]{1,3})%/'
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - frontend/.gradle/nodejs
  artifacts:
    when: always
    paths:
      - build/reports/
    expire_in: 1 week
  except:
    - schedules

contract-tests:
  services:
    - name: openplatform/ganache
      alias: ganache
  image: openplatform/truffle
  script:
    - apk --no-cache add make g++ python && npm i web3-utils
    - export RPC_HOST="ganache"
    - cd src/test/truffle && truffle test


###########################
# Building
###########################
build-jar:
  stage: build
  image: openjdk:8-jdk
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - apt update && apt install make gcc g++ -y
  script:
    - ./gradlew assemble -Penv='sprint'
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches
      - frontend/.gradle/nodejs
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 week
  only:
    - state-integrating
    - master
    - sprint
    - tags
  except:
    - schedules


###########################
# Packaging
###########################
package-docker:
  stage: package
  script:
    - if [[ ${CI_COMMIT_REF_NAME} == master ]]; then export IMAGE_TAG=latest; else export IMAGE_TAG=${CI_COMMIT_REF_NAME}; fi;
    - docker login -u ${DOCKER_LOGIN} -p ${DOCKER_PASS}
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f docker/Dockerfile .
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}
  only:
    - sprint
    - master
    - tags
  except:
    - schedules


###########################
# Deployment
###########################
.prepare-key-script: &prepare_key
  - apk add --no-cache openssh-client
  - eval $(ssh-agent -s)
  - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts


.deploy-to-host-script: &deploy_to_host
  - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "docker pull ${IMAGE_NAME}:${IMAGE_TAG}"
  - |
    ssh ${DEPLOY_USER}@${DEPLOY_HOST} "
      docker stop ${CONTAINER_NAME} && \
      IMG=\$(docker ps -a --filter='name=^/${CONTAINER_NAME}$' --format='{{.Image}}') &&  \
      docker rm -f ${CONTAINER_NAME} && \
      docker rmi \$IMG; \
      exit 0
    "
  - |
    ssh ${DEPLOY_USER}@${DEPLOY_HOST} "
      docker run -d --name '${CONTAINER_NAME}' --restart=always \
                 -p 8080:8080 \
                 -e "POSTGRES_HOST=${POSTGRES_HOST}" \
                 -e "POSTGRES_DB=${POSTGRES_DB}" \
                 -e "POSTGRES_USER=${POSTGRES_USER}" \
                 -e "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" \
                 -e "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" \
                 -e "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" \
                 -e "NETWORK_URL=${NETWORK_URL}" \
                 -e "ETHEREUM_PRIVATE_KEY=${ETHEREUM_PRIVATE_KEY}" \
                 -e "OPEN_TOKEN_ADDRESS=${OPEN_TOKEN_ADDRESS}" \
                 -e "EVENT_SUBSCRIPTION=${EVENT_SUBSCRIPTION}" \
                 -e "WIDGET_HOST=${WIDGET_HOST}" \
                 -e "OPEN_API_URL=${OPEN_API_URL}" \
                 -e "STATE_API_URL=${STATE_API_URL}" \
                 ${IMAGE_NAME}:${IMAGE_TAG}
    "


deploy-development:
  stage: deploy
  variables:
    DEPLOY_USER: $DEPLOY_USER_DEV
    DEPLOY_HOST: $DEPLOY_HOST_DEV
    DEPLOY_KEY: $DEPLOY_KEY_DEV
    CONTAINER_NAME: open-api
    POSTGRES_HOST: $POSTGRES_HOST_DEV
    POSTGRES_DB: $POSTGRES_DB_DEV
    POSTGRES_USER: $POSTGRES_USER_DEV
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD_DEV
    GOOGLE_CLIENT_ID: $GOOGLE_CLIENT_ID_DEV
    GOOGLE_CLIENT_SECRET: $GOOGLE_CLIENT_SECRET_DEV
    NETWORK_URL: $NETWORK_URL_DEV
    ETHEREUM_PRIVATE_KEY: $ETHEREUM_PRIVATE_KEY_DEV
    OPEN_TOKEN_ADDRESS: $OPEN_TOKEN_ADDRESS_DEV
    EVENT_SUBSCRIPTION: "true"
    WIDGET_HOST: "https://api.open-platform.zensoft.io"
    OPEN_API_URL: $DEPLOY_HOST_DEV
    STATE_API_URL: "http://35.236.244.135/api"
    IMAGE_TAG: sprint
  before_script: *prepare_key
  script: *deploy_to_host
  only:
    - sprint
  environment:
    name: development
    url: http://api.open-platform.zensoft.io
  except:
    - schedules


deploy-production:
  stage: deploy
  variables:
    DEPLOY_USER: $DEPLOY_USER_PROD
    DEPLOY_HOST: $DEPLOY_HOST_PROD
    DEPLOY_KEY: $DEPLOY_KEY_PROD
    CONTAINER_NAME: open-api
    POSTGRES_HOST: $POSTGRES_HOST_PROD
    POSTGRES_DB: $POSTGRES_DB_PROD
    POSTGRES_USER: $POSTGRES_USER_PROD
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD_PROD
    GOOGLE_CLIENT_ID: $GOOGLE_CLIENT_ID_PROD
    GOOGLE_CLIENT_SECRET: $GOOGLE_CLIENT_SECRET_PROD
    NETWORK_URL: $NETWORK_URL_PROD
    ETHEREUM_PRIVATE_KEY: $ETHEREUM_PRIVATE_KEY_PROD
    OPEN_TOKEN_ADDRESS: $OPEN_TOKEN_ADDRESS_PROD
    EVENT_SUBSCRIPTION: "true"
    WIDGET_HOST: "https://api.openfuture.io"
    OPEN_API_URL: $DEPLOY_HOST_PROD
    STATE_API_URL: "http:/35.236.227.112/api"
    IMAGE_TAG: latest
  before_script: *prepare_key
  script: *deploy_to_host
  only:
    - tags
  environment:
    name: production
    url: https://api.openfuture.io
  except:
    - schedules


###########################
# Certificates
###########################
.update-certificates-script: &update_certificates
  - |
    ssh ${DEPLOY_USER}@${DEPLOY_HOST} "
      docker run --rm --name certbot  \
                 -v /etc/letsencrypt:/etc/letsencrypt \
                 -v /var/www/certbot:/var/www/certbot \
                 -v /var/log/letsencrypt:/var/log/letsencrypt \
                 certbot/certbot \
                 certonly --webroot -w /var/www/certbot/ \
                 -d ${SERVER_NAME} \
                 --renew-by-default -m devops@zensoft.io --eff-email --agree-tos --manual-public-ip-logging-ok
    "
  - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "sudo service nginx reload"


certificates-development:
  stage: certificates
  variables:
    DEPLOY_USER: $DEPLOY_USER_DEV
    DEPLOY_HOST: $DEPLOY_HOST_DEV
    DEPLOY_KEY: $DEPLOY_KEY_DEV
    SERVER_NAME: "api.open-platform.zensoft.io"
  before_script: *prepare_key
  script: *update_certificates
  only:
    - schedules


certificates-production:
  stage: certificates
  variables:
    DEPLOY_USER: $DEPLOY_USER_PROD
    DEPLOY_HOST: $DEPLOY_HOST_PROD
    DEPLOY_KEY: $DEPLOY_KEY_PROD
    SERVER_NAME: "api.openfuture.io"
  before_script: *prepare_key
  script: *update_certificates
  only:
    - schedules